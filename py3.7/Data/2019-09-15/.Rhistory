rnorm(-1,1,100)
rnorm(100,1,0.5)
plot(rnorm(100,1,0.5))
hist(rnorm(1,100,0.1))
hist(rnorm(1,100,5))
hist(rnorm(1,100,5), color = "black")
density(rnorm(1,100,5))
intall.packages("ggplot2")
install.packages("ggplot2")
install.packages("plotly")
install.packages("reshape2")
install.packages("dplyr")
x <- rnorm(1,100,0.5)
y <- ggplot(rnorm)
library(ggplot2)
y <- ggplot(rnorm)
y <- ggplot(x)
data.frame(x)
x
rnorm(1,100,0.5)
rnorm(100,1,0.5)
x <- rnorm(100,1,0.5)
plot()
plot(x)
x <- data.frame(x)
ggplot(x) + geom_histogram()
View(x)
x$no. <- seq(1,100,by = 1)
ggplot(x, aes(x = no., y = x)) + geom_histogram()
ggplot(x, aes(x = x)) + geom_histogram()
ggplot(x, aes(x = x)) + geom_histogram(binwidth = 0.2)
ggplot(x, aes(x = x)) + geom_histogram(binwidth = 0.1)
ggplot(x, aes(x = x)) + geom_histogram(binwidth = 0.05)
ggplot(x, aes(x = x)) + geom_histogram(binwidth = 0.005)
ggplot(x, aes(x = x)) + geom_histogram(binwidth = 0.06)
ggplot(x, aes(x = x)) + geom_density()
ggplot(x, aes(x = x)) + geom_density()
+ theme_bw(base_family = "Times")
ggplot(x, aes(x = x)) + geom_density() + theme_bw(base_family = "Times")
plot(rnorm(100m,1,0.5))
plot(rnorm(100,1,0.5))
hist(rnorm(1000), breaks = 100)
curve()
curve(dnorm(x, 100, col = "red"))
curve(dnorm(x, 100), col = "red"))
curve(dnorm(x, 100), col = "red")
curve(dnorm(x,mean = mean(rnorm(1000)), sd = sd(rnorm(1000)), add = T, col = "red")
)
curve(dnorm(x,mean = mean(rnorm(1000)), sd = sd(rnorm(1000)), add = T, col = "red"))
curve(dnorm(x,mean = mean(rnorm(1000)), sd = sd(rnorm(1000))), add = T, col = "red")
hist(rnorm(1000), breaks = 1000)
hist(rnorm(1000), breaks = 100))
hist(rnorm(1000), breaks = 100)
curve(dnorm(x,mean = mean(rnorm(1000)), sd = sd(rnorm(1000))), add = T, col = "red")
hist(rnorm(1000), breaks = 100),freq = F)
hist(rnorm(1000), breaks = 100,freq = F)
curve(dnorm(x,mean = mean(rnorm(1000)), sd = sd(rnorm(1000))), add = T, col = "red")
:1
:q
2
q
quit()
install.packages('sf')
library(sf)
ggplot() + geom_sf
library(ggplot2)
ggplot() + geom_sf
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
p <- ggplotly(
ggplot(nc) +
geom_sf(aes(fill = AREA))
)
p <-
ggplot(nc) +
geom_sf(aes(fill = AREA))
p
head(nc)
if (requireNamespace("sf", quietly = TRUE)) {
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
ggplot(nc) +
geom_sf(aes(fill = AREA))
# If not supplied, coord_sf() will take the CRS from the first layer
# and automatically transform all other layers to use that CRS. This
# ensures that all data will correctly line up
nc_3857 <- sf::st_transform(nc, "+init=epsg:3857")
ggplot() +
geom_sf(data = nc) +
geom_sf(data = nc_3857, colour = "red", fill = NA)
# Unfortunately if you plot other types of feature you'll need to use
# show.legend to tell ggplot2 what type of legend to use
nc_3857$mid <- sf::st_centroid(nc_3857$geometry)
ggplot(nc_3857) +
geom_sf(colour = "white") +
geom_sf(aes(geometry = mid, size = AREA), show.legend = "point")
# You can also use layers with x and y aesthetics: these are
# assumed to already be in the common CRS.
ggplot(nc) +
geom_sf() +
annotate("point", x = -80, y = 35, colour = "red", size = 4)
# Thanks to the power of sf, a geom_sf nicely handles varying projections
# setting the aspect ratio correctly.
library(maps)
world1 <- sf::st_as_sf(map('world', plot = FALSE, fill = TRUE))
ggplot() + geom_sf(data = world1)
world2 <- sf::st_transform(
world1,
"+proj=laea +y_0=0 +lon_0=155 +lat_0=-90 +ellps=WGS84 +no_defs"
)
ggplot() + geom_sf(data = world2)
# To add labels, use geom_sf_label().
ggplot(nc_3857[1:3, ]) +
geom_sf(aes(fill = AREA)) +
geom_sf_label(aes(label = NAME))
}
install.packages('rgeos')
library(rgeos)
# Thanks to the power of sf, a geom_sf nicely handles varying projections
# setting the aspect ratio correctly.
library(maps)
library(sf)
library(ggplot2)
if (requireNamespace("sf", quietly = TRUE)) {
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
ggplot(nc) +
geom_sf(aes(fill = AREA))
# If not supplied, coord_sf() will take the CRS from the first layer
# and automatically transform all other layers to use that CRS. This
# ensures that all data will correctly line up
nc_3857 <- sf::st_transform(nc, "+init=epsg:3857")
ggplot() +
geom_sf(data = nc) +
geom_sf(data = nc_3857, colour = "red", fill = NA)
# Unfortunately if you plot other types of feature you'll need to use
# show.legend to tell ggplot2 what type of legend to use
nc_3857$mid <- sf::st_centroid(nc_3857$geometry)
ggplot(nc_3857) +
geom_sf(colour = "white") +
geom_sf(aes(geometry = mid, size = AREA), show.legend = "point")
# You can also use layers with x and y aesthetics: these are
# assumed to already be in the common CRS.
ggplot(nc) +
geom_sf() +
annotate("point", x = -80, y = 35, colour = "red", size = 4)
# Thanks to the power of sf, a geom_sf nicely handles varying projections
# setting the aspect ratio correctly.
library(maps)
world1 <- sf::st_as_sf(map('world', plot = FALSE, fill = TRUE))
ggplot() + geom_sf(data = world1)
world2 <- sf::st_transform(
world1,
"+proj=laea +y_0=0 +lon_0=155 +lat_0=-90 +ellps=WGS84 +no_defs"
)
ggplot() + geom_sf(data = world2)
# To add labels, use geom_sf_label().
ggplot(nc_3857[1:3, ]) +
geom_sf(aes(fill = AREA)) +
geom_sf_label(aes(label = NAME))
}
install.packages('geom_sf_label')
library(sf)
library(ggplot2)
library(rgeos)
if (requireNamespace("sf", quietly = TRUE)) {
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
ggplot(nc) +
geom_sf(aes(fill = AREA))
# If not supplied, coord_sf() will take the CRS from the first layer
# and automatically transform all other layers to use that CRS. This
# ensures that all data will correctly line up
nc_3857 <- sf::st_transform(nc, "+init=epsg:3857")
ggplot() +
geom_sf(data = nc) +
geom_sf(data = nc_3857, colour = "red", fill = NA)
# Unfortunately if you plot other types of feature you'll need to use
# show.legend to tell ggplot2 what type of legend to use
nc_3857$mid <- sf::st_centroid(nc_3857$geometry)
ggplot(nc_3857) +
geom_sf(colour = "white") +
geom_sf(aes(geometry = mid, size = AREA), show.legend = "point")
# You can also use layers with x and y aesthetics: these are
# assumed to already be in the common CRS.
ggplot(nc) +
geom_sf() +
annotate("point", x = -80, y = 35, colour = "red", size = 4)
# Thanks to the power of sf, a geom_sf nicely handles varying projections
# setting the aspect ratio correctly.
library(maps)
world1 <- sf::st_as_sf(map('world', plot = FALSE, fill = TRUE))
ggplot() + geom_sf(data = world1)
world2 <- sf::st_transform(
world1,
"+proj=laea +y_0=0 +lon_0=155 +lat_0=-90 +ellps=WGS84 +no_defs"
)
ggplot() + geom_sf(data = world2)
# To add labels, use geom_sf_label().
ggplot(nc_3857[1:3, ]) +
geom_sf(aes(fill = AREA)) +
#geom_sf_label(aes(label = NAME))
}
library(sf)
library(ggplot2)
library(rgeos)
if (requireNamespace("sf", quietly = TRUE)) {
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
ggplot(nc) +
geom_sf(aes(fill = AREA))
# If not supplied, coord_sf() will take the CRS from the first layer
# and automatically transform all other layers to use that CRS. This
# ensures that all data will correctly line up
nc_3857 <- sf::st_transform(nc, "+init=epsg:3857")
ggplot() +
geom_sf(data = nc) +
geom_sf(data = nc_3857, colour = "red", fill = NA)
# Unfortunately if you plot other types of feature you'll need to use
# show.legend to tell ggplot2 what type of legend to use
nc_3857$mid <- sf::st_centroid(nc_3857$geometry)
ggplot(nc_3857) +
geom_sf(colour = "white") +
geom_sf(aes(geometry = mid, size = AREA), show.legend = "point")
# You can also use layers with x and y aesthetics: these are
# assumed to already be in the common CRS.
ggplot(nc) +
geom_sf() +
annotate("point", x = -80, y = 35, colour = "red", size = 4)
# Thanks to the power of sf, a geom_sf nicely handles varying projections
# setting the aspect ratio correctly.
library(maps)
world1 <- sf::st_as_sf(map('world', plot = FALSE, fill = TRUE))
ggplot() + geom_sf(data = world1)
world2 <- sf::st_transform(
world1,
"+proj=laea +y_0=0 +lon_0=155 +lat_0=-90 +ellps=WGS84 +no_defs"
)
ggplot() + geom_sf(data = world2)
# To add labels, use geom_sf_label().
ggplot(nc_3857[1:3, ]) +
geom_sf(aes(fill = AREA))
#geom_sf_label(aes(label = NAME))
}
#DATA ANALYSIS FOR ALL HOUSING DATA GATHERED IN CALIFORNIA CRAIGSLIST
library(tidyverse)
library(viridis)
library(ggmap)
setwd("/Users/irahorecka/Desktop/Harddrive_Desktop/Python/CL_Mining/py3.7/Data/2019-09-15")
dat <-  read.csv("2019-09-15_all_craigslist_housing_eby_California.csv", sep = ',', header=T, stringsAsFactors = F)
dat <- dat %>%
filter(Post.has.Geotag != 'None')
for(i in 1:length(dat$CL.State)){
x <- str_extract_all(dat$Post.has.Geotag[i],"\\(?[0-9,.]+\\)?")[[1]][1]
dat$long[i] <- substr(x,2,nchar(x)-1)
y <- str_extract_all(dat$Post.has.Geotag[i],"\\(?[0-9,.]+\\)?")[[1]][2]
dat$lat[i] <- substr(y,0,nchar(y)-1)
dat$Price[i] <- gsub(",", "", substr(dat$Price[i],2,20), fixed = TRUE)
}
dat <- dat[-106,]
dat$long <- as.numeric(dat$long)
dat$lat <- -(as.numeric(dat$lat))
dat$Price <- as.numeric(dat$Price)
dat <- dat %>%
filter(Price > quantile(Price,.25)-1.5*(IQR(Price)),
Price < quantile(Price,.75)+1.5*(IQR(Price)))
#dat$long <-  as.numeric(substr((str_extract_all(dat$Post.has.Geotag,"\\(?[0-9,.]+\\)?"))[[1]][1],2,nchar(dat$Post.has.Geotag)-2))
ca_county <- merge(ca_county, county_cl[, c("subregion", "Median")], by="subregion")
ca_base <- ggplot(ca_df, aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = 'black',fill='white')
ca_base + theme_nothing() +
geom_polygon(data = ca_county, fill = NA, color = "black") +
geom_polygon(color = "black", fill = NA) +
coord_fixed(xlim = c(-123, -121.0),  ylim = c(36.8, 39), ratio = 1.3)
#geom_point(data=dat, aes(y=long,x=lat, color=Price), inherit.aes = F)
